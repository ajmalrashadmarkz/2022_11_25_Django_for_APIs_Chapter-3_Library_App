____________________  1. Initial Set Up - Django_project  ____________________

1. Django 4.1.3 and Python 3.10
2. Create Directory - Library Website
3. Create a virtual environment within this new directory
    - python -m venv .venv
    - Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser [..Windows Execution - Enable for running scripts]
    - .venv\Scripts\Activate.ps1 [.. Activate - virtual environment]
    - deactivate [..Deactivate and leave a virtual environment type]
4. Install Django
    - python -m pip install django~=4.1.3
5. Pip to be on the latest version
    - python -m pip install --upgrade pip
6. Create a new Django project [.. Project Name = django_project]
    - django-admin startproject django_project .
7. Add .gitignore


____________________ 2. Git SetUp -- Initialisation  ____________________
    - git init
    - git status
    - git config user.name "ajmalrashadmarkz"
    - git config user.email "ajmalrashadmarkz@gmail.com"
    - git add .
    - git commit -m "1. Setup Django Basics files"
    -  git remote add origin https://github.com/ajmalrashadmarkz/22_11_25_Django_for_APIs_Chapter-3_Library_App.git
    - git push -u origin master

____________________  3. Create App - books ____________________
    - Create books app
        ○ python manage.py startapp books
    - Register the App
        ○  django_project/settings.py
        ○  INSTALLED_APPS = [
			    .....
			   "posts.apps.BlogConfig", # new
			]
	- Migrate the database
	    ○ python manage.py migrate

____________________  4. Setup Template Folder & Home Page  ____________________
    - Create new directory in the following order
        ○ books[...App folder] -> templates [...New Dir] -> pages [...New Dir]
    - Create Home Page
        ○ pages\templates\pages\home.html

                    OR
    - Create new directory templates in project folder
        ○ Library Website -> templates [...New Dir]
    - Create Home page
        ○ Library Website\templates\home.html
    - Add templates in django_project/settings.py
        TEMPLATES = [
            {
                ...
                "DIRS": [BASE_DIR / "templates"], # new
                ...
            },
        ]

____________________  5. Create Class Based View for model class[...Post]  ____________________
    - books/views.py
    - import ListView -> django.view.generic
    - Create a class
        ○ HomePageView(TemplateView [...Derived Class] ):
               template_name = "webpage name" [...Class variable]

____________________  6. SetUp Url for project and app  ____________________
    - Create new urls.py file in app folder
        ○ books/urls.py
        ○ import path
        ○ import HomePageView
        ○ urlpatterns = [
                path("", HomePageView.as_view(), name="home" ),
            ]
    - Include app url in project url
        ○ django_project/urls
        ○ import include -> [... from django.urls]
        ○ urlpatterns = [
                path("", include("books.urls")),
            ]


____________________  7. Create Database Model  ____________________
    - blog/models.py
    - import models, reverse
    - Create a class ->
        name post
        attributes title[...char],Author[...foriegn key],body[...char]
    - Author -> ForeignKey
        allows for a many-to-one relationship
        given user can be the author of many different blog posts
        all many-to-one relationships such as a ForeignKey we must also specify an on_delete75 option
    - get_absolute_url
        URL named post_detail and pass in the pk

    - Migration
        python manage.py makemigrations blog
        python manage.py migrate

____________________  8. Django - Admin   ____________________
    - Create a SuperUser
        python manage.py createsuperuser
    - register on
        blog/admin.py


____________________  9. Setup the template   ____________________
    - use first method
        no need to add BASE DIR in settings
        app -> templates -> app name -> ::::_list.html
        any name will give for class View_Name

        Naming Convention is very important
        ::::::_list.html   -> very important

        Base.html -> extends not working

                    home.html
    - base.html extends in to home page
        {% extends "base.html" %}
    - define block content inside the block & end block
        {% block content %}
        {% for book in book_list %}
            <div>
                <ul>
                    <li>Title: {{ book.title }}</li>
                    <li>Subtitle: {{ book.subtitle }}</li>
                    <li>Athor: {{ book.author }}</li>
                    <li>ISBN: {{ book.isbn }}</li>
                </ul>
            </div>
        {% endfor %}
        {% endblock content %}

____________________  10. Tests   ____________________
    - import testcase and reverse and import Book
    - Create a class -> BookTests [...Base Class testcase]
        class BookTests(TestCase):
    - function
       ○ setUpTestData
            def setUpTestData(cls):
                cls.book = Book.objects.create(
                title="A good title",
                subtitle="An excellent subtitle",
                author="Tom Christie",
                isbn="1234567890123",
                )
       ○ test_book_content
            def test_book_content(self):
                self.assertEqual(self.book.title, "A good title")
                self.assertEqual(self.book.subtitle, "An excellent subtitle")
                self.assertEqual(self.book.author, "Tom Christie")
                self.assertEqual(self.book.isbn, "1234567890123")
       ○ def test_home_pagevew(self):
            def test_home_pagevew(self):
                 response = self.client.get(reverse("home"))
                 self.assertEqual(response.status_code, 200)
                 self.assertContains(response, "excellent subtitle")
                 self.assertTemplateUsed(response, "books/book_list.html")
    -

____________________  11. Library API  ____________________
    - Create a new URL
        ○ Acts an API endpoint outputting all available model data
        ○ New URL route
        ○ New view
        ○ New serializer file

____________________  12. Django REST Framework  ____________________
    - installing Django REST Framework
        ○ python -m pip install djangorestframework~=3.14.0
    - Add rest_framework in INSTALLED_APPS
        ○ INSTALLED_APPS = [
            # 3rd party
            "rest_framework", # new
            # Local
            "books.apps.BooksConfig",
          ]
    - Create a dedicated apis app for our project
        ○ Apps should always have a plural name
            python manage.py startapp apis
    - Add it to INSTALLED_APPS
        INSTALLED_APPS = [
            "apis.apps.ApisConfig",
        ]

____________________  13. apis - serializers ____________________
    - Create a new py file -> serializers.py
    - A serializer33 translates complex data like querysets and model instances into a JSON format

    - import serializers [...from rest_framework]
    - import Model [...from app.model]

    - Create a class -> AppameSerializer [...baseclass -> serializers.ModelSerializer]
        - Create another class -> Meta
        - attributes model, field
            model = Model_Name [... Book]
            fields = ("model class item1", "model class item2", "model class item3"........)  -> [...("title", "subtitle", "author", "isbn")]

____________________  14. apis - views ____________________
    - Import generics [...from rest_framework]
    - Import Model [... AppName.Model]
    - Import BookSerializer[... class name ] from [.serializers]

    - Create new class -> BookAPIView [... base class -> generics.APIView]
        - Objects
            queryset, serializer_class
            [...
            queryset = ModelClassName.objects.all()
            serializer_class = ClassNameofSerielizers
            ]

____________________  15. apis - urls ____________________
    - Create a new .py file -> urls.py
    - import path [... django.urls]
    - import ViewClassName [... .vies]

    - setup url patterns
        urlpatterns = [
            path("", BookAPIView.as_view(), name="book_list"),
        ]

____________________  16. apis - include url in project urls ____________________
    - urlpatterns = [
            path("api/", include("apis.urls")),
        ]

____________________  17. apis - Test for APIs ____________________
    - apis/tests.py
    - Import
        reverse [... from urls]
        status  [... from rest_framework]
        APITestCase [... from rest_framework]
        Books
    - Create a class APITests
        - Create two function
            setUpTestData -> [... sample object class]
            est_api_listview -> [... check response]

    - run
        python manage.py test apis



















    -Create a new directory  in project folder -> static
    - Update static url in settings
        STATIC_URL = "/static/"
    - Specify where the static folder available
        STATICFILES_DIRS = [BASE_DIR / "static"]
    - inside static folder create a new directory -> css
    - Create a new file inside the css folder -> base.css

                base.css
    - header h1 a {
        color: red;
     }

                base.html
    - load the static folder
        {% load static %}
    - link the stylesheet
        <link rel="stylesheet" href="{% static 'css/base.css' %}">

____________________  9. Individual blog pages   ____________________
                    # blog/views.py
    - import DetailView -> django.views.generic
    - Create new class -> BlogDetailView [Base Class - DetailView]
    - Attributes model,template_name [model - Post, template_name - post_detail.html]

                    #template/post_detail.html
    - create a new html page
    - extends base class
    - create block -> content
    - setup div
        inside div h2 & p

                    #blog/urls
    - import BlogDetailView [view]
    - setup path("", BlogDetailView.as_view(), name="....html")
    - url as post/key

                    #template/home.html
    - setup hyperlink
        url -> post_details with key







____________________  4. Create models for posts app  ____________________
    - posts/models.py
    - import models [... from db]
    - Create class name Post
        Extends to Model detived class [... models.Model]
        create a variable text [... class -> Text Field , Attribute - Empty]
            class Post(models.Model):
                text = models.TextField()
    - Activating models
        python manage.py makemigrations posts [... App name -> posts]
        python manage.py migrate

____________________  5. Setup Django Admin Interface   ____________________
    - Creation of super user
        python manage.py createsuperuser
    - import admin [... from contrib]
    - import Post [... from models]
    - Register the model with admin.site.register()
        admin.site.register(Post)

____________________  6. Change the Display Name [post] - Descriptive Naming - Automatically ____________________
    - Descriptive Naming - Automatically
    -  posts/models.py
    - Add new function __str__ [... str() methods]
       ○ model instance methods
       ○ __str__() method is called whenever you call str() on an object
            def __str__(self):
                return self.text[:50]


____________________  10. SetUp ListView of Model  ____________________
    - templates\home.html
    - ListView - automatically returns to us a context variable called <model>_list
        Eg:-
            model name -> post
             list view pass the variable like post_list
             {% for post in post_list %} [... loop took variable one by one ]
    - listing object
        post.text [... text is object name]
